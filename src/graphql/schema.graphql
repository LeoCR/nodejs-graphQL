type Query {
  product(id: ID!): Product
  products: [Product!]!
  category(id: ID!): Category
  avocados: [Avocado!]!
  avocado(id:ID!): Avocado
}

type Mutation {
  addProduct(dto: CreateProductDto!): Product
  updateProduct(id: ID!, dto: UpdateProductDto!): Product
  deleteProduct(id: ID!): ID
  login(email: String!, password: String!): AuthResponse
  addCategory(dto: CreateCategoryDto!): Category
  addAvocado(dto: CreateAvocadoDto!): Avocado
}

type Product {
  id: ID!
  name: String!
  price: Float!
  description: String!
  image: String!
  createdAt: String!
  categoryId: ID!
  category: Category!
}

type Avocado {
  id: ID!
  image: String!
  name: String!
  createdAt: String!
  deletedAt: String!
  updatedAt: String!
  sku: String!
  price: Float!
  attributes: Attribute
}

type Attribute {
  id: ID!
  description: String!
  shape: String!
  taste: String!
  hardiness: String!
  createdAt: String!
  deletedAt: String!
  updatedAt: String!
  avocadoId: ID!
}
type Category {
  id: ID!
  name: String!
  image: String!
  createdAt: String!
  products: [Product]
}
type User {
  id: ID!
  email: String!
  role: String!
  createdAt: String!
}
type AuthResponse {
  access_token: String
  user: User
}

input UpdateProductDto {
  name: String
  price: Float
  description: String
  image: String
  categoryId: ID
}
input CreateProductDto {
  name: String!
  price: Float!
  description: String!
  image: String!
  categoryId: ID!
}

input CreateCategoryDto {
  name: CategoryNameType!
  image: String!
}

input CreateAvocadoDto {
  image: String!
  name: String!
  sku: String!
  price: Float!
  description: String
  shape: String
  hardiness: String
  taste: String
}
scalar CategoryNameType
